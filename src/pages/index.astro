---
import Main from "../layouts/Main.astro";
import { Image } from "astro:assets";
import H2 from "../components/HTMLElements/H2.astro";
import Hero from "../components/Hero.astro";
import Container from "../components/Container.astro";
import JSTS from "../assets/TypeScriptJavaScript.png";
import Other from "../assets/OtherLangs2.png";
import InfoCard from "../components/InfoCard.astro";
---

<Main title="nathantranquilla.me | Next-Gen Web Dev">
  <Hero />
  <Container
    classes="text-white bg-slate-900 w-full grid grid-rows-[2rem_auto] md:grid-cols-[320px_320px] px-auto justify-center md:p-4 p-2 gap-4"
  >
    <H2 class="font-sans text-xl font-semibold text-white md:text-2xl">
      Vision of Next-Gen Web Dev
    </H2>
    <p class="col-start-1 row-start-2 font-sans text-white">
      Next-Gen Web Dev aims for reliable, secure web applications free from
      preventable errors. It requires a shift to robust, strongly typed
      languages that eliminate entire classes of bugs, ensuring developers trust
      their tools and users trust their apps.
    </p>
    <Image
      class="col-start-2 row-start-1 row-end-3 mx-auto hidden rounded-lg bg-white md:block"
      src={Other}
      alt="Other languages logos"
    />
  </Container>
  <Container
    classes="text-black w-full flex flex-col md:grid md:grid-cols-[320px_320px] px-auto justify-center md:p-4 p-2 gap-4"
  >
    <H2 class="col-start-2 font-sans text-xl font-semibold md:text-2xl">
      The current status quo
    </H2>
    <p class="col-start-1 col-start-2 row-start-2 font-sans">
      JavaScript’s weak typing, implicit coercions, and runtime errors make it
      unsuitable for modern web development. TypeScript, while an improvement,
      falls short of a strong type system. It permits unsafe array access, lacks
      full null safety, allows implicit conversions, and misses exhaustive type
      checking. These flaws make it inadequate for reliable server-side (SSR) or
      client-side (CSR) applications. The web needs languages that guarantee
      correctness, not just suggest it.
    </p>
    <Image
      class="col-start-1 row-start-1 row-end-3 hidden md:block"
      src={JSTS}
      alt="JavaScript and TypeScript logos"
    />
  </Container>
  <!-- <Container
    classes="text-white bg-slate-900 font-sans text-black w-full grid grid-cols-1 md:grid-cols-[640px] px-auto justify-center md:p-4 p-2 gap-4"
  >
    <H2 class="text-xl font-semibold md:text-2xl">
      Principles: The Strong Type System
    </H2>
    <p class="col-start-1 row-start-2 py-4">
      At the core of Next-Gen Web Dev are languages with strong type systems.
      Therefore a Next-Gen Web Language will have:
    </p>
    <table
      class="w-full border-separate border-spacing-0 overflow-hidden rounded-xl bg-white shadow-2xl"
    >
      <thead>
        <tr>
          <th
            class="bg-lime-900 px-6 py-4 text-left font-semibold text-white first:rounded-tl-xl last:rounded-tr-xl"
            >Feature</th
          >
          <th
            class="bg-lime-900 px-6 py-4 text-left font-semibold text-white first:rounded-tl-xl last:rounded-tr-xl"
            >Description</th
          >
        </tr>
      </thead>
      <tbody>
        <tr
          class="transition-all duration-200 hover:-translate-y-0.5 hover:bg-slate-50 hover:shadow-md"
        >
          <td class="px-6 py-4 font-medium text-slate-900 md:whitespace-nowrap"
            >Type Safety</td
          >
          <td class="px-6 py-4 text-slate-700"
            >Invalid operations are caught at compile-time.</td
          >
        </tr>
        <tr
          class="bg-slate-50 transition-all duration-200 hover:-translate-y-0.5 hover:bg-slate-100 hover:shadow-md"
        >
          <td class="px-6 py-4 font-medium text-slate-900 md:whitespace-nowrap"
            >Static Type Checking</td
          >
          <td class="px-6 py-4 text-slate-700"
            >Types are enforced before execution.</td
          >
        </tr>
        <tr
          class="transition-all duration-200 hover:-translate-y-0.5 hover:bg-slate-50 hover:shadow-md"
        >
          <td class="px-6 py-4 font-medium text-slate-900 md:whitespace-nowrap"
            >No Implicit Coercion</td
          >
          <td class="px-6 py-4 text-slate-700"
            >Automatic conversions are prohibited.</td
          >
        </tr>
        <tr
          class="bg-slate-50 transition-all duration-200 hover:-translate-y-0.5 hover:bg-slate-100 hover:shadow-md"
        >
          <td class="px-6 py-4 font-medium text-slate-900 md:whitespace-nowrap"
            >Expressive Types</td
          >
          <td class="px-6 py-4 text-slate-700"
            >Algebraic data types and pattern matching for precise data
            modeling.</td
          >
        </tr>
        <tr
          class="transition-all duration-200 hover:-translate-y-0.5 hover:bg-slate-50 hover:shadow-md"
        >
          <td class="px-6 py-4 font-medium text-slate-900 md:whitespace-nowrap"
            >Compile-Time Null Safety</td
          >
          <td class="px-6 py-4 text-slate-700"
            >Explicit handling of null/undefined.</td
          >
        </tr>
        <tr
          class="bg-slate-50 transition-all duration-200 hover:-translate-y-0.5 hover:bg-slate-100 hover:shadow-md"
        >
          <td class="px-6 py-4 font-medium text-slate-900 md:whitespace-nowrap"
            >Exhaustive Matching</td
          >
          <td class="px-6 py-4 text-slate-700"
            >All cases in logic must be covered.</td
          >
        </tr>
        <tr
          class="transition-all duration-200 hover:-translate-y-0.5 hover:bg-slate-50 hover:shadow-md"
        >
          <td class="px-6 py-4 font-medium text-slate-900 md:whitespace-nowrap"
            >Type Inference</td
          >
          <td class="px-6 py-4 text-slate-700"
            >Automatic type deduction without compromising safety.</td
          >
        </tr>
        <tr
          class="bg-slate-50 transition-all duration-200 hover:-translate-y-0.5 hover:bg-slate-100 hover:shadow-md"
        >
          <td class="px-6 py-4 font-medium text-slate-900 md:whitespace-nowrap"
            >Soundness</td
          >
          <td class="px-6 py-4 text-slate-700">No type errors at runtime.</td>
        </tr>
        <tr
          class="transition-all duration-200 last:rounded-b-xl hover:-translate-y-0.5 hover:bg-slate-50 hover:shadow-md"
        >
          <td
            class="px-6 py-4 font-medium text-slate-900 last:rounded-bl-xl md:whitespace-nowrap"
            >Safe Array Access</td
          >
          <td class="px-6 py-4 text-slate-700 last:rounded-br-xl"
            >Bounds checking to prevent crashes.</td
          >
        </tr>
      </tbody>
    </table>
  </Container> -->
  <Container
    classes="text-white bg-slate-900 font-sans text-black w-full grid grid-cols-1 lg:grid-cols-[repeat(2,500px)] md:grid-cols-[repeat(2,400px)] px-auto justify-center md:p-4 p-2 gap-4"
  >
    <H2
      classes="pb-6 w-full text-xl font-semibold md:text-2xl col-span-full flex justify-center"
    >
      The Components Of Next-Gen Web Dev
    </H2>
    <InfoCard
      title="Strong Type System"
      link="/blogs/strong-type-systems-are-required-for-a-safer-web"
    >
      <p>
        A strong type system prevents entire categories of runtime errors by
        catching mistakes at compile-time. Unlike JavaScript's weak typing or
        TypeScript's compromises, truly strong types eliminate null pointer
        exceptions, array bounds errors, and type coercion surprises. This means
        fewer bugs, safer refactoring, and increased developer confidence.
        Strong types serve as living documentation, making code self-explanatory
        and maintainable. For Next-Gen Web Dev, strong typing isn't
        optional—it's the foundation of reliable software.
      </p>
    </InfoCard>
    <InfoCard title="Language Lineage">
      <p>
        Developers choose new languages that look familiar but fix critical
        problems. TypeScript's existence proves developers desperately want
        strong typing in JavaScript—they're willing to add build complexity just
        for basic type safety. This pattern repeats throughout programming
        history: C++ fixed C's safety issues, Kotlin addressed Java's verbosity,
        Rust solved C++'s memory problems. Next-Gen Web Dev languages follow
        this lineage, offering JavaScript's familiarity with genuine type
        safety, null safety, and compile-time guarantees that TypeScript cannot
        provide.
      </p>
    </InfoCard>
    <InfoCard title="Framework Readiness">
      <p>
        Strong types alone aren't enough—Next-Gen languages need mature
        framework ecosystems for real-world adoption. A language becomes viable
        when it offers full-stack solutions: routing, state management, data
        fetching, and UI libraries. Framework readiness means developers can
        build complete applications without sacrificing type safety or reverting
        to JavaScript. Languages like ReScript with React integration, or Elm
        with its architecture, demonstrate how type-safe languages can provide
        comprehensive development platforms that rival traditional web
        frameworks.
      </p>
    </InfoCard>
    <InfoCard title="Incremental Adoption">
      <p>
        Next-Gen languages excel at incremental migration through depth-first
        adoption. Unlike TypeScript's breadth-first approach that adds types
        everywhere superficially, these languages allow you to fully convert
        specific modules or components while maintaining perfect interop with
        existing JavaScript. This means you can achieve complete type safety in
        critical paths without rewriting entire codebases. Teams can migrate
        strategically—converting high-value modules first while legacy code
        continues running unchanged.
      </p>
    </InfoCard>
  </Container>
  <Container
    classes="text-black w-full grid grid-cols-1 md:grid-cols-[640px] px-auto justify-center md:p-4 p-2"
  >
    <H2 class="font-sans text-xl font-semibold md:text-2xl">
      The Committment of Next-Gen Web Dev
    </H2>
    <ul class="list-inside list-disc py-6">
      <li class="py-2">
        <strong>Adopt Type-Safe Languages:</strong> Prioritize strongly typed languages
        for SSR and CSR to reduce bugs and maintenance costs.
      </li>
      <li class="py-2">
        <strong>Reduce JavaScript’s Role:</strong> Transition JavaScript to a compilation
        target for safer, scalable systems.
      </li>
      <li class="py-2">
        <strong>Move Beyond TypeScript:</strong> Replace TypeScript with languages
        offering sound type systems to minimize runtime errors.
      </li>
      <li class="py-2">
        <strong>Enhance Productivity:</strong> Use tools that catch errors at compile-time
        to streamline development and improve reliability.
      </li>
      <li class="py-2">
        <strong>Build for the Future:</strong> Embrace robust, type-safe languages
        for stable, secure, and competitive web platforms.
      </li>
    </ul>
  </Container>
</Main>
